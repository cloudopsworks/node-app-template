##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      buildEnvironment:
        required: true
        type: string
      environment:
        required: true
        type: string
      targetName:
        required: false
        type: string
        default: ''
      isRelease:
        required: true
        type: boolean
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_STS_ROLE_ARN:
        required: false
        type: string
        default: ""

    secrets:
      BOT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

    outputs:
      has_preview:
        description: "Has Preview output"
        value: ${{ jobs.pipeline-config.outputs.has_preview }}
      pipeline_helm:
        description: "Pipeline with Helm Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_helm }}
      pipeline_docker:
        description: "Pipeline with Docker Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_docker }}
      pipeline_sonarqube:
        description: "Pipeline with Sonarqube Analysis Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_sonarqube }}
      pipeline_dtrack:
        description: "Pipeline with DependencyTrack Analysis Enabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_dtrack }}
      pipeline_dtrack_project_type:
        description: "Pipeline classification for DependencyTrack Analysis, blank when dtrack is disabled"
        value: ${{ jobs.pipeline-config.outputs.pipeline_dtrack_project_type }}
      semver:
        description: "Semver Output calculated on Build"
        value: ${{ jobs.build.outputs.semver }}
      package_name:
        description: "Package Name Output calculated on Build"
        value: ${{ jobs.pipeline-config.outputs.package_name }}

jobs:
  pipeline-config:
    outputs:
      has_preview: ${{ steps.has_preview.outputs.result == 1 }}
      pipeline_helm: ${{ steps.pipeline_helm.outputs.result == 1 }}
      pipeline_docker: ${{ steps.pipeline_docker.outputs.result == 1 }}
      pipeline_sonarqube: ${{ steps.disable_sonarqube.outputs.result == 0 }}
      pipeline_dtrack: ${{ steps.disable_dtrack.outputs.result == 0 }}
      pipeline_dtrack_project_type: ${{ steps.dtrack_project_type.outputs.type }}
      package_name: ${{ steps.package_name.outputs.result }}
      exclude_globs: ${{ steps.exclude_globs.outputs.result }}
      zip_globs: ${{ steps.zip_globs.outputs.result }}
      pipeline_node_build: ${{ steps.pipeline_node_build.outputs.result }}
      node_version: ${{ steps.node_version.outputs.result }}
      node_dist: ${{ steps.node_dist.outputs.result }}
      node_build_dir: ${{ steps.node_build_dir.outputs.result }}
      node_extra_env_env: ${{ steps.node_extra_env_env.outputs.result }}
      node_extra_env: ${{ steps.node_extra_env.outputs.result }}
      docker_inline: ${{ steps.docker_inline.outputs.result }}
      install_command: ${{ steps.install_command.outputs.result }}
      build_command: ${{ steps.build_command.outputs.result }}
      front_end: ${{ steps.front_end.outputs.result == 'true' }}
      repository_name: ${{ needs.pipeline-config.outputs.repository_name }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Get pipeline conf node version
      - name: Get pipeline node version
        id: node_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.version // "20"' ./.github/cloudopsworks-ci.yaml
      # Get pipeline conf node dist
      - name: Get pipeline node dist
        id: node_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.dist // "adopt"' ./.github/cloudopsworks-ci.yaml
      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep docker | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline preview enabled
        id: has_preview
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.preview.enabled' ./.github/cloudopsworks-ci.yaml | grep true | wc -l | tr -d " "

      # Get Sonarqube Configuration is disabled
      - name: Get Pipeline conf Sonarqube is Disabled
        id: disable_sonarqube
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.sonarqube.enabled' ./.github/cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack Configuration is disabled
      - name: Get Pipeline conf DependencyTrack is Disabled
        id: disable_dtrack
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.dependencyTrack.enabled' ./.github/cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack project type configuration, default is null
      - name: Get Pipeline conf DependencyTrack Project type
        id: dtrack_project_type_eval
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.dependencyTrack.type' ./.github/cloudopsworks-ci.yaml

      # Determine Dependency Track Project Type properly with default
      - name: Determine Pipeline conf DependencyTrack Project type
        id: dtrack_project_type
        run: |
          type=${{ steps.dtrack_project_type_eval.outputs.result }}
          if [ "$type" == "null" ] ; then
            type=Library
          fi
          echo "type=$type" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep helm | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging
        id: pipeline_zip
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep zip | wc -l | tr -d " "

      # Get pipeline conf (build)
      - name: Get pipeline node_build packaging
        id: pipeline_node_build
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep node_build | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging globs
        id: zip_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.zipGlobs[]' ./.github/cloudopsworks-ci.yaml

      # Get pipeline conf
      - name: Get pipeline zip packaging exclude globs
        id: exclude_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.excludeGlobs[]' ./.github/cloudopsworks-ci.yaml

      # Get Package Name from package.json
      - name: Get package Name
        id: package_name
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oj -r '.name' package.json

      # get from global inputs extra env vars from specific build environment: node_extra_env entry
      - name: Get Optional Env Vars - ${{ inputs.environment }}
        id: node_extra_env_env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.node_extra_env // ""' ./.github/vars/inputs-${{ inputs.environment }}.yaml | tr '\n' ' ' | sed 's/.$//'

      # get from global inputs extra env vars from : node_extra_env entry
      - name: Get Optional Env Vars
        id: node_extra_env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.node_extra_env // ""' ./.github/vars/inputs-global.yaml | tr '\n' ' ' | sed 's/.$//'

      # Get from global inputs if there is custom node install command
      - name: Get Custom Install Command
        id: install_command
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.custom_install_command // "npm install --omit=dev"' ./.github/vars/inputs-global.yaml

      # Get from global inputs if there is custom node build command
      - name: Get Custom Install Command
        id: build_command
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.custom_build_command // "npm run build --if-present"' ./.github/vars/inputs-global.yaml

      # get from global inputs the path where to find the node build result
      - name: Get Node Build Dir
        id: node_build_dir
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.node_build_dir // "./build"' ./.github/vars/inputs-global.yaml

      # get from global inputs the setting if it is frontend target
      - name: Get Front-End Setting
        id: front_end
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.frontend // false' ./.github/vars/inputs-global.yaml

      # get from global inputs the docker inline specification as text
      - name: Get Docker Inline Setting
        id: docker_inline
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.docker_inline // ""' ./.github/vars/inputs-global.yaml

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

  build:
    needs:
      - pipeline-config
    outputs:
      semver: ${{ steps.semver.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Node JS for builds with version provided
      - name: Set Node Version
        uses: actions/setup-node@v4
        with:
          node-version: "${{ needs.pipeline-config.outputs.node_version }}"
          check-latest: true
          token: ${{ secrets.BOT_TOKEN }}
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v4
        with:
          version: 'latest'
          token: ${{ secrets.BOT_TOKEN }}
      # Cache all NPM packages
      - name: Cache NPM packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Versioning SET
      - name: Version SET
        run: make version

      - name: Version Capture
        id: semver
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      # Edit package.json in order to include repository for automatic linking
      - name: Package.JSON - REPO auto link
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oj -i '.repository.type="git"|.repository.url="${{ github.repositoryUrl }}"' package.json

      # Build the code!
      - name: Install Dependencies
        run: |
          ${{ needs.pipeline-config.outputs.node_extra_env_env != '' && needs.pipeline-config.outputs.node_extra_env_env || needs.pipeline-config.outputs.node_extra_env }} ${{ needs.pipeline-config.outputs.install_command }}

      # Build the code! build target MUST be defined in package.json
      - name: Run NPM Build
        run: |
          ${{ needs.pipeline-config.outputs.node_extra_env != '' && needs.pipeline-config.outputs.node_extra_env || needs.pipeline-config.outputs.node_extra_env_env }} ${{ needs.pipeline-config.outputs.build_command }}

      # Test the code
      - name: Test Code
        run: |
          CI=true DISPLAY=:99 npm test --if-present

      # Deploy Code to Registry
      - name: Deploy Code to Registy
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          registry: "https://npm.pkg.github.com"
          strategy: "all"
          access: "restricted"

      #
      # Perform ZIP packaging of target files & globbed files
      # Minimal compression = 1
      - name: ZIP file packaging
        if: needs.pipeline-config.outputs.pipeline_zip
        run: |
          VERSION=$(cat VERSION)
          ZIPFILE=target/${{ needs.pipeline-config.outputs.repository_name }}.zip
          mkdir -p target/
          echo '${{ needs.pipeline-config.outputs.zip_globs }}' > target/.includelist
          echo '${{ needs.pipeline-config.outputs.exclude_globs }}' > target/.excludelist
          zip -1 -q -r -y ${ZIPFILE} . -i@target/.includelist -x@target/.excludelist

      # Perform of upload artfiacts
      - name: Upload Artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: all_artifacts
          path: |
            target/${{ needs.pipeline-config.outputs.repository_name }}*.zip
          retention-days: 1
          include-hidden-files: true

      # Perform the node_build packaging right from the build directory
      - name: Upload Build result
        uses: actions/upload-artifact@v4
        if: needs.pipeline-config.outputs.pipeline_node_build
        with:
          name: node_build_artifact
          path: ${{ needs.pipeline-config.outputs.node_build_dir }}
          retention-days: 1
          compression-level: '1' #fast

  docker-build:
    needs:
      - pipeline-config
      - build
    runs-on: ubuntu-latest
    if: needs.pipeline-config.outputs.pipeline_docker && needs.pipeline-config.outputs.front_end
    uses: cloudopsworks/base-app-template/.github/workflows/docker-build-node.yml@v4
    with:
      DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
      BOT_USER: ${{ inputs.BOT_USER }}
      BOT_EMAIL: ${{ inputs.BOT_EMAIL }}
      TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
      AWS_REGION: ${{ inputs.AWS_REGION }}
      AWS_STS_ROLE_ARN: ${{ inputs.AWS_STS_ROLE_ARN }}
      isRelease: ${{ inputs.isRelease }}
      repository_name: ${{ needs.pipeline-config.outputs.repository_name }}
      repository_owner: ${{ github.repository_owner }}
      docker_inline: ${{ needs.pipeline-config.outputs.docker_inline }}
      front_end: ${{ needs.pipeline-config.outputs.front_end }}
      node_version: ${{ needs.pipeline-config.outputs.node_version }}
    secrets:
      token: ${{ secrets.BOT_TOKEN }}
      inherit: true