##
# (c) 2022 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      buildEnvironment:
        required: true
        type: string
      environment:
        required: true
        type: string
      targetName:
        required: false
        type: string
        default: ''
      isRelease:
        required: true
        type: boolean
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_STS_ROLE_ARN:
        required: false
        type: string
        default: ""

    secrets:
      BOT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

    outputs:
      has_preview:
        description: "Has Preview output"
        value: ${{ jobs.build.outputs.has_preview }}
      pipeline_helm:
        description: "Pipeline with Helm Enabled"
        value: ${{ jobs.build.outputs.pipeline_helm }}
      pipeline_docker:
        description: "Pipeline with Docker Enabled"
        value: ${{ jobs.build.outputs.pipeline_docker }}
      pipeline_sonarqube:
        description: "Pipeline with Sonarqube Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_sonarqube }}
      pipeline_dtrack:
        description: "Pipeline with DependencyTrack Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack }}
      pipeline_dtrack_project_type:
        description: "Pipeline classification for DependencyTrack Analysis, blank when dtrack is disabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack_project_type }}
      semver:
        description: "Semver Output calculated on Build"
        value: ${{ jobs.build.outputs.semver }}
      package_name:
        description: "Package Name Output calculated on Build"
        value: ${{ jobs.build.outputs.package_name }}

jobs:
  build:
    outputs:
      has_preview: ${{ steps.has_preview.outputs.result == 1 }}
      pipeline_helm: ${{ steps.pipeline_helm.outputs.result == 1 }}
      pipeline_docker: ${{ steps.pipeline_docker.outputs.result == 1 }}
      pipeline_sonarqube: ${{ steps.disable_sonarqube.outputs.result == 0 }}
      pipeline_dtrack: ${{ steps.disable_dtrack.outputs.result == 0 }}
      pipeline_dtrack_project_type: ${{ steps.dtrack_project_type.outputs.type }}
      semver: ${{ steps.semver.outputs.version }}
      package_name: ${{ steps.package_name.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          #ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Get pipeline conf node version
      - name: Get pipeline node version
        id: node_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.version // "20"' ./.github/cloudopsworks-ci.yaml
      # Get pipeline conf node dist
      - name: Get pipeline node dist
        id: node_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.dist // "adopt"' ./.github/cloudopsworks-ci.yaml
      # Setup Node JS for builds with version provided
      - name: Set Node Version
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.result }}"
          check-latest: true
          token: ${{ secrets.BOT_TOKEN }}
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v4
        with:
          version: 'latest'
          token: ${{ secrets.BOT_TOKEN }}
      # Cache all NPM packages
      - name: Cache NPM packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep docker | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline preview enabled
        id: has_preview
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.cd.preview.enabled' ./.github/cloudopsworks-ci.yaml | grep true | wc -l | tr -d " "

      # Get Sonarqube Configuration is disabled
      - name: Get Pipeline conf Sonarqube is Disabled
        id: disable_sonarqube
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.sonarqube.enabled' ./.github/cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack Configuration is disabled
      - name: Get Pipeline conf DependencyTrack is Disabled
        id: disable_dtrack
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.dependencyTrack.enabled' ./.github/cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack project type configuration, default is null
      - name: Get Pipeline conf DependencyTrack Project type
        id: dtrack_project_type_eval
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.build.dependencyTrack.type' ./.github/cloudopsworks-ci.yaml

      # Determine Dependency Track Project Type properly with default
      - name: Determine Pipeline conf DependencyTrack Project type
        id: dtrack_project_type
        run: |
          type=${{ steps.dtrack_project_type_eval.outputs.result }}
          if [ "$type" == "null" ] ; then
            type=Library
          fi
          echo "type=$type" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep helm | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging
        id: pipeline_zip
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.pipeline[]' ./.github/cloudopsworks-ci.yaml | grep zip | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging globs
        id: zip_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.zipGlobs[]' ./.github/cloudopsworks-ci.yaml

      # Get pipeline conf
      - name: Get pipeline zip packaging exclude globs
        id: exclude_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq e '.excludeGlobs[]' ./.github/cloudopsworks-ci.yaml

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Versioning SET
      - name: Version SET
        run: make version

      - name: Version Capture
        id: semver
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      # Proceed with helm chart versioning bump
      - name: Helm Chart Versioning
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: make helm/version

      # Get Package Name from package.json
      - name: Get package Name
        id: package_name
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oj -r '.name' package.json

      # Edit package.json in order to include repository for automatic linking
      - name: Package.JSON - REPO auto link
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oj -i '.repository.type="git"|.repository.url="${{ github.repositoryUrl }}"' package.json

      # get from global inputs extra env vars from specific build environment: node_extra_env entry
      - name: Get Optional Env Vars
        id: node_extra_env_env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.node_extra_env // ""' ./.github/vars/inputs-${{ inputs.environment }}.yaml | tr '\n' ' '

      # get from global inputs extra env vars from : node_extra_env entry
      - name: Get Optional Env Vars Environment
        id: node_extra_env
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.node_extra_env // ""' ./.github/vars/inputs-global.yaml | tr '\n' ' '

      # Get from global inputs if there is custom node install command
      - name: Get Custom Install Command
        id: install_command
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.custom_install_command // "npm install --omit=dev"' ./.github/vars/inputs-global.yaml

      # Get from global inputs if there is custom node build command
      - name: Get Custom Install Command
        id: build_command
        uses: mikefarah/yq@master
        with:
          cmd: yq e -I=0 '.custom_build_command // "npm run build"' ./.github/vars/inputs-global.yaml

      # Build the code!
      - name: Install Dependencies
        run: |
          ${{ steps.node_extra_env.outputs.result != '' && steps.node_extra_env.outputs.result || steps.node_extra_env_env.outputs.result }} ${{ steps.install_command.outputs.result }}

      # Build the code! build target MUST be defined in package.json
      - name: Run NPM Build
        run: |
          ${{ steps.node_extra_env.outputs.result != '' && steps.node_extra_env.outputs.result || steps.node_extra_env_env.outputs.result }} ${{ steps.build_command.outputs.result }}

      # Test the code
      - name: Test Code
        run: |
          CI=true DISPLAY=:99 npm test

      # Deploy Code to Registry
      - name: Deploy Code to Registy
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          registry: "https://npm.pkg.github.com"
          strategy: "all"
          access: "restricted"
      #
      # Docker Build login Azure
      - name: Docker Login Azure
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ steps.pipeline_docker.outputs.result == 1 && env.TARGET == 'AZURE' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      #
      # Docker Build login AWS
      - name: Configure AWS Credentials
        if: ${{ steps.pipeline_docker.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS' && inputs.AWS_STS_ROLE_ARN == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      #
      # Docker Build login AWS - w/Assume Role
      - name: Configure AWS Credentials with Assume Role
        if: ${{ steps.pipeline_docker.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS' && inputs.AWS_STS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ inputs.AWS_STS_ROLE_ARN }}
          role-session-name: ${{ steps.getowner.outputs.repo_name }}-build
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Docker Login AWS
        if: ${{ steps.pipeline_docker.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
      #
      # Build-X run
      - name: Set up Docker Buildx
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/setup-buildx-action@v3
      # Push docker version latest release
      - name: Docker Push Release
        if: steps.pipeline_docker.outputs.result == 1 && inputs.isRelease
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.semver.outputs.version }}
      # Push docker version but is not latest release
      - name: Docker Push Non-Release
        if: steps.pipeline_docker.outputs.result == 1 && ! inputs.isRelease
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.semver.outputs.version }}
      #
      # Helm Build and deploy to ACR registry
      #
      - name: Helm Build Release Azure ACR
        if: steps.pipeline_helm.outputs.result == 1 && env.TARGET_CLOUD == 'AZURE'
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
        run: make helm/release

      #
      # Helm Build and deploy to ECR registry
      #
      - name: AWS ECR login
        id: ecr_login
        if: steps.pipeline_helm.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS'
        env:
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
        run: |
          pass=`aws ecr get-login-password --region $AWS_REGION`
          echo "auth=$pass" >> $GITHUB_OUTPUT

      - name: Helm Build Release AWS ECR
        if: steps.pipeline_helm.outputs.result == 1 && inputs.TARGET_CLOUD == 'AWS'
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          HELM_CREDS_USER: AWS
          HELM_CREDS_PASSWORD: ${{ steps.ecr_login.outputs.auth }}
        run: make helm/release
      #
      # Perform ZIP packaging of target files & globbed files
      #
      - name: ZIP file packaging
        if: steps.pipeline_zip.outputs.result == 1
        run: |
          VERSION=$(cat VERSION)
          ZIPFILE=target/${{ steps.getowner.outputs.repo_name }}-${VERSION}.zip
          mkdir -p target/
          echo '${{ steps.zip_globs.outputs.result }}' > target/.includelist
          echo '${{ steps.exclude_globs.outputs.result }}' > target/.excludelist
          zip -q -r -y ${ZIPFILE} . -i@target/.includelist -x@target/.excludelist

      # Perform of upload artfiacts
      - name: Upload Artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: all-artifacts
          path: |
            target/${{ steps.getowner.outputs.repo_name }}*.zip
          retention-days: 1