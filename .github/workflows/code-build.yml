##
# (c) 2022 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Build Workflow Template

on:
  workflow_call:
    inputs:
      isRelease:
        default: true
        required: false
        type: boolean
      isHotfix:
        default: false
        required: false
        type: boolean
      ref:
        default: ''
        required: false
        type: string
      semver:
        required: true
        type: string
      DOCKER_REGISTRY_ADDRESS:
        required: true
        type: string
      HELM_REGISTRY_ADDRESS:
        required: true
        type: string
      BOT_USER:
        required: true
        type: string
      BOT_EMAIL:
        required: true
        type: string
      TARGET_CLOUD:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string

    secrets:
      BOT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_SERVICE_ID:
        required: true
      AZURE_SERVICE_SECRET:
        required: true

    outputs:
      has_preview:
        description: "Has Preview output"
        value: ${{ jobs.build.outputs.has_preview }}
      pipeline_helm:
        description: "Pipeline with Helm Enabled"
        value: ${{ jobs.build.outputs.pipeline_helm }}
      pipeline_docker:
        description: "Pipeline with Docker Enabled"
        value: ${{ jobs.build.outputs.pipeline_docker }}
      pipeline_sonarqube:
        description: "Pipeline with Sonarqube Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_sonarqube }}
      pipeline_dtrack:
        description: "Pipeline with DependencyTrack Analysis Enabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack }}
      pipeline_dtrack_project_type:
        description: "Pipeline classification for DependencyTrack Analysis, blank when dtrack is disabled"
        value: ${{ jobs.build.outputs.pipeline_dtrack_project_type }}
      cdenv_enabled:
        description: "Pipeline has CD environment enabled."
        value: ${{ jobs.build.outputs.cdenv_enabled }}


jobs:
  build:
    outputs:
      has_preview: ${{ steps.has_preview.outputs.result == 1 }}
      pipeline_helm: ${{ steps.pipeline_helm.outputs.result == 1 }}
      pipeline_docker: ${{ steps.pipeline_docker.outputs.result == 1 }}
      pipeline_sonarqube: ${{ steps.disable_sonarqube.outputs.result == 0 }}
      pipeline_dtrack: ${{ steps.disable_dtrack.outputs.result == 0 }}
      pipeline_dtrack_project_type: ${{ steps.dtrack_project_type.outputs.type }}
      cdenv_enabled: ${{ steps.cdenv_enabled.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}
          token: ${{ secrets.BOT_TOKEN }}
      # Get pipeline conf node version
      - name: Get pipeline node version
        id: node_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.version // "14"' ./cloudopsworks-ci.yaml
      # Get pipeline conf node dist
      - name: Get pipeline node dist
        id: node_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.dist // "adopt"' ./cloudopsworks-ci.yaml
      # Setup Node JS for builds with version provided
      - name: Set Node Version
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.node_version.outputs.result }}"
          check-latest: true
          token: ${{ secrets.BOT_TOKEN }}
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v3
        with:
          version: 'latest'
          token: ${{ secrets.BOT_TOKEN }}
      # Cache all NPM packages
      - name: Cache NPM packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep docker | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline preview enabled
        id: has_preview
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.cd.preview.enabled' ./cloudopsworks-ci.yaml | grep true | wc -l | tr -d " "

      # Get Sonarqube Configuration is disabled
      - name: Get Pipeline conf Sonarqube is Disabled
        id: disable_sonarqube
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.sonarqube.enabled' ./cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack Configuration is disabled
      - name: Get Pipeline conf DependencyTrack is Disabled
        id: disable_dtrack
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.dependencyTrack.enabled' ./cloudopsworks-ci.yaml | grep false | wc -l | tr -d " "

      # Get DependencyTrack project type configuration, default is null
      - name: Get Pipeline conf DependencyTrack Project type
        id: dtrack_project_type_eval
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.dependencyTrack.type' ./cloudopsworks-ci.yaml

      # Determine Dependency Track Project Type properly with default
      - name: Determine Pipeline conf DependencyTrack Project type
        id: dtrack_project_type
        run: |
          type=${{ steps.dtrack_project_type_eval.outputs.result }}
          if [ "$type" == "null" ] ; then
            type=Library
          fi
          echo "type=$type" >> $GITHUB_OUTPUT

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep helm | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging
        id: pipeline_zip
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep zip | wc -l | tr -d " "

      # Get pipeline conf
      - name: Get pipeline zip packaging globs
        id: zip_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.zipGlobs[]' ./cloudopsworks-ci.yaml

      # Get pipeline conf
      - name: Get pipeline zip packaging exclude globs
        id: exclude_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.excludeGlobs[]' ./cloudopsworks-ci.yaml

      # Get pipeline conf target environment
      - name: Get pipeline target environment
        id: cdenv_enabled
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.cd.env != null' ./cloudopsworks-ci.yaml

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Create a VERSION file to use through the build
      - name: Set Version File for a Release
        env:
          NEXT_VERSION: "${{ inputs.semver }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION

      # Build the code!
      - name: Build Code
        run: npm install
      # Test the code
      - name: Test Code
        run: CI=true DISPLAY=:99 npm test
      #
      # Docker Build login Azure
      - name: Docker Login Azure
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ steps.pipeline_docker.outputs.result == 1 && env.TARGET == 'AZ' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      #
      # Docker Build login AWS
      - name: Configure AWS Credentials
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ steps.pipeline_docker.outputs.result == 1 && env.TARGET == 'AWS' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Docker Login AWS
        env:
          TARGET: ${{ inputs.TARGET_CLOUD }}
        if: ${{ steps.pipeline_docker.outputs.result == 1 && env.TARGET == 'AWS' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
      #
      # Build-X run
      - name: Set up Docker Buildx
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/setup-buildx-action@v2
      # Push docker version latest release
      - name: Docker Push Release
        if: steps.pipeline_docker.outputs.result == 1 && inputs.isRelease == true
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ inputs.semver }}
      # Push docker version but is not latest release
      - name: Docker Push Preview
        if: steps.pipeline_docker.outputs.result == 1 && inputs.isRelease == false
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          tags: |
            ${{ inputs.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ inputs.semver }}
      #
      # Helm tag pull request version
      #
      - name: Helm Build Preview
        if: steps.pipeline_helm.outputs.result == 1 && inputs.isRelease == false
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
        run: |
          cd charts/$REPOSITORY_NAME
          make tag
      #
      # Helm Build and deploy to ACR registry
      #
      - name: Helm Build Release Azure ACR
        if: steps.pipeline_helm.outputs.result == 1 && inputs.isRelease == true && env.TARGET_CLOUD == 'AZ'
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
        run: |
          cd charts/$REPOSITORY_NAME
          make release

      #
      # Helm Build and deploy to ECR registry
      #
      - name: AWS ECR login
        id: ecr_login
        if: steps.pipeline_helm.outputs.result == 1 && inputs.isRelease == true && env.TARGET_CLOUD == 'AWS'
        env:
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
        run: |
          pass=`aws ecr get-login-password --region $AWS_REGION`
          echo "auth=$pass" >> $GITHUB_OUTPUT

      - name: Helm Build Release AWS ECR
        if: steps.pipeline_helm.outputs.result == 1 && inputs.isRelease == true && env.TARGET_CLOUD == 'AWS'
        env:
          HELM_REGISTRY_ADDRESS: ${{ inputs.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ inputs.DOCKER_REGISTRY_ADDRESS }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
          TARGET_CLOUD: ${{ inputs.TARGET_CLOUD }}
          HELM_CREDS_USER: AWS
          HELM_CREDS_PASSWORD: ${{ steps.ecr_login.outputs.auth }}
        run: |
          cd charts/$REPOSITORY_NAME
          make release

      #
      # Perform ZIP packaging of target files & globbed files
      #
      - name: ZIP file packaging
        if: steps.pipeline_zip.outputs.result == 1
        run: |
          VERSION=$(cat VERSION)
          ZIPFILE=target/${{ steps.getowner.outputs.repo_name }}-${VERSION}.zip
          mkdir -p target/
          echo '${{ steps.zip_globs.outputs.result }}' > target/.includelist
          echo '${{ steps.exclude_globs.outputs.result }}' > target/.excludelist
          zip -q -r -y ${ZIPFILE} . -i@target/.includelist -x@target/.excludelist

      # Perform of upload artfiacts
      - name: Upload Artifacts to workflow
        if: inputs.isRelease
        uses: actions/upload-artifact@v3
        with:
          name: all-artifacts
          path: |
            target/${{ steps.getowner.outputs.repo_name }}*.zip
            CHANGELOG.md
          retention-days: 1