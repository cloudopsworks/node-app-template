##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Code Tagging Workflow Template

on:
  workflow_call:

    outputs:
      release_version:
        value: ${{ jobs.tag_version.outputs.release_version }}
      release_tag:
        value: ${{ jobs.tag_version.outputs.release_tag }}

    secrets:
      DOCKER_REGISTRY_ADDRESS:
        required: true
      HELM_REGISTRY_ADDRESS:
        required: true
      BOT_USER:
        required: true
      BOT_EMAIL:
        required: true
      BOT_TOKEN:
        required: true

jobs:
  tag_version:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.semvers.outputs.patch }}
      release_tag: ${{ steps.tagged.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Node JS for builds
      - name: Set Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          distribution: "adopt"
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v1
      # Cache all maven packages
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep helm | wc -l

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"

      # Get previous tags in order to proceed to generate next version
      - name: Get Previous tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        id: previoustag
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          fallback: 0.0.0
      # Generate next SEMVER number
      - name: Next Semver
        uses: WyriHaximus/github-action-next-semvers@v1
        id: semvers
        with:
          version: "${{ steps.previoustag.outputs.tag }}"

      # Create a VERSION file to use through the build
      - name: Set Version File for a Release
        env:
          NEXT_VERSION: "${{ steps.semvers.outputs.patch }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION

      # Create ChangeLog file into main directory for commit case of Release
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v3.0.0
        with:
          myToken: ${{ secrets.BOT_TOKEN }}
          base-ref: '${{ steps.previoustag.outputs.tag }}'
      - name: Write Changelog
        run: |
          cat > CHANGELOG.md <<EOF
          ${{ steps.changelog.outputs.changelog }}
          EOF

      # Node JS Versioning SET
      - name: NodeJS Version
        run: npm version $(cat VERSION) --git-tag-version=false --commit-hooks=false

      # Proceed with helm chart versioning bump
      - name: Helm Chart Versioning
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ secrets.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ secrets.DOCKER_REGISTRY_ADDRESS }}
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/${REPOSITORY_NAME}
          make tag

      # Push the changes to Git TAG before deploying anything
      - name: Push TAG
        id: tagged
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          VERSION=$(cat VERSION)
          git config --global user.name "${{ secrets.BOT_USER }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git add .
          git commit -m "chore: release version v$VERSION"
          git tag -fa v$VERSION -m "Release Version v$VERSION"
          git push origin v$VERSION
          echo "::set-output name=tag_name::v$VERSION"
