
##
# (c) 2021 - CloudopsWorks OÃœ - https://docs.cloudops.works/
#
name: NodeJS Build
on:
  # Run only on branches PUSH except when charts are modified
  push:
    branches:
      - master
    paths-ignore:
      - ".github/workflows/**"
  workflow_dispatch:
    
# Permission Settings for the entire RUN
permissions:
  contents: write
  packages: write
  statuses: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release.outputs.release_version }}
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
      # Setup Node JS for builds
      - name: Set Node 12
        uses: actions/setup-node@v2
        with:
          node-version: "12"
          distribution: "adopt"
      # Helm Chart build & deploy Support
      - uses: azure/setup-helm@v1
      # Cache all maven packages
      - name: Cache NPM packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Get pipeline conf
      - name: Get pipeline docker enable
        id: pipeline_docker
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep docker | wc -l

      # Get pipeline conf
      - name: Get pipeline helm enable
        id: pipeline_helm
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep helm | wc -l

      # Get pipeline conf
      - name: Get pipeline zip packaging
        id: pipeline_zip
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.pipeline[]' ./cloudopsworks-ci.yaml | grep zip | wc -l

      # Get pipeline conf
      - name: Get pipeline zip packaging globs
        id: zip_globs
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.zipGlobs[]' ./cloudopsworks-ci.yaml

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"
      # Get previous tags in order to proceed to generate next version
      - name: Get Previous tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        id: previoustag
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      # Generate next SEMVER number
      - name: Next Semver
        uses: WyriHaximus/github-action-next-semvers@v1
        id: semvers
        with:
          version: "${{ steps.previoustag.outputs.tag }}"
      # Create a VERSION file to use through the build
      - name: Set Version File
        id: release
        env:
          NEXT_VERSION: "${{ steps.semvers.outputs.patch }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION
          echo "::set-output name=release_version::$NEXT_VERSION"
      # Node JS Versioning SET
      - name: NodeJS Version
        run: npm version $(cat VERSION) --git-tag-version=false --commit-hooks=false
      # Build the code!
      - name: Build Code
        run: npm install
      # Test the code
      - name: Test Code
        run: CI=true DISPLAY=:99 npm test
      # Proceed with helm chart versioning bump
      - name: Helm Chart Versioning
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ secrets.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ secrets.DOCKER_REGISTRY_ADDRESS }}
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/${REPOSITORY_NAME}
          make tag
      # Push the changes to Git TAG before deploying anything
      - name: Release Version
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          VERSION=$(cat VERSION)
          git config --global user.name "finconecta-bot"
          git config --global user.email "finconecta-bot@4wrd.online"
          git commit -a -m "chore: release version v$VERSION"
          git tag -fa v$VERSION -m "Release Version v$VERSION"
          git push origin v$VERSION
      #TODO: Build a Zip Package with release and attach as Artifact for the release.
      #- name: Build Package Version
      #  run: make release

      #
      # Docker Build and deploy to registry
      #
      - name: Docker Login
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_ADDRESS }}
          username: ${{ secrets.AZURE_SERVICE_ID }}
          password: ${{ secrets.AZURE_SERVICE_SECRET }}
      - name: Set up Docker Buildx
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/setup-buildx-action@v1
      - name: Docker Push
        if: steps.pipeline_docker.outputs.result == 1
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: |
            ${{ secrets.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:latest
            ${{ secrets.DOCKER_REGISTRY_ADDRESS }}/${{ steps.getowner.outputs.owner }}/${{ steps.getowner.outputs.repo_name }}:${{ steps.release.outputs.release_version }}
      #
      # Helm Build and deploy to registry
      #
      - name: Helm Build
        if: steps.pipeline_helm.outputs.result == 1
        env:
          HELM_REGISTRY_ADDRESS: ${{ secrets.HELM_REGISTRY_ADDRESS }}
          DOCKER_REGISTRY_ADDRESS: ${{ secrets.DOCKER_REGISTRY_ADDRESS }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          REPOSITORY_OWNER: ${{ steps.getowner.outputs.owner }}
          REPOSITORY_NAME: ${{ steps.getowner.outputs.repo_name }}
        run: |
          cd charts/$REPOSITORY_NAME
          make release

      #
      # Perform ZIP packaging of target files & globbed files
      #
      - name: ZIP file packaging
        if: steps.pipeline_zip.outputs.result == 1
        run: |
          VERSION=$(cat VERSION)
          ZIPFILE=target/${{ steps.getowner.outputs.repo_name }}-v${VERSION}.zip
          mkdir -p target/
          for glob in '${{ steps.zip_globs.outputs.result }}' ; do
            zip -u -r ${ZIPFILE} $glob
          done

      #
      # Post generated zip into GITHUB artifacts
      #
      # - name: Upload artifacts
      #   if: steps.pipeline_zip.outputs.result == 1
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ steps.getowner.outputs.repo_name }}-v${{ steps.release.outputs.release_version }}.zip
      #     path: target/${{ steps.getowner.outputs.repo_name }}-v${{ steps.release.outputs.release_version }}.zip

  static-analysis:
    runs-on: ubuntu-latest
    needs:
      - build-release
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
          ref: v${{ needs.build-release.outputs.release_version }}
      # Setup Node JS for builds
      - name: Set Node 12
        uses: actions/setup-node@v2
        with:
          node-version: "12"
          distribution: "adopt"
      # Test the code!
      - name: Static Test Code
        env:
          SONARQUBE_URL: ${{ secrets.SONARQUBE_URL }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          npm install -D gulp
          node ./node_modules/gulp/bin/gulp.js

  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - build-release
      - static-analysis
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
          ref: v${{ needs.build-release.outputs.release_version }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"

      # Get pipeline conf
      - name: Get pipeline target environment
        id: get_env
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.cd.env' ./cloudopsworks-ci.yaml

      # Environment Determination
      - name: Find Target Environment
        id: target_env
        run: |
          ENV="${{ steps.get_env.outputs.result }}"
          if [[ "$ENV" == "" ]] ; then
            ENV="staging"
          fi
          echo "::set-output name=result::$ENV"

      # Build Payload script
      - name: Build Payload params
        id: params
        run: |
          payload="{\"promote\": {"
          payload="${payload}\"repositoryowner\": \"${{ steps.getowner.outputs.owner }}\""
          payload="${payload}, \"repository\": \"${{ steps.getowner.outputs.repo_name }}\""
          payload="${payload}, \"environment\": \"${{ steps.target_env.outputs.result }}\""
          payload="${payload}, \"version\": \"${{ needs.build-release.outputs.release_version }}\""
          payload="${payload}, \"releasename\": \"${{ steps.getowner.outputs.repo_name }}\""
          payload="${payload} } }"

          echo "::set-output name=payload::$payload"

      # Send event to repository to launch new promotion
      - name: Send Event to Environment Repository
        id: send_event
        uses: peter-evans/repository-dispatch@v1
        with:
          token: "${{ secrets.BOT_TOKEN }}"
          repository: ${{ steps.getowner.outputs.owner }}/environment-${{ steps.getowner.outputs.owner }}-${{ steps.target_env.outputs.result }}
          event-type: promote-environment
          client-payload: '${{ steps.params.outputs.payload }}'

