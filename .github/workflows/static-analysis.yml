##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Static Analysis Process
on:
  workflow_call:
    inputs:
#      ref:
#        required: true
#        type: string
      semver:
        required: false
        type: string
      sonarqubeUrl:
        required: true
        type: string

    secrets:
      BOT_TOKEN:
        required: true
      sonarqubeToken:
        required: true

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
          #ref: ${{ inputs.ref }}
      # Get pipeline conf node version
      - name: Get pipeline node version
        id: node_version
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.version // "20"' ./cloudopsworks-ci.yaml
      # Get pipeline conf node dist
      - name: Get pipeline node dist
        id: node_dist
        uses: mikefarah/yq@master
        with:
          cmd: yq eval '.build.node.dist // "adopt"' ./cloudopsworks-ci.yaml
      # Setup Node JS for builds with version provided
      - name: Set Node Version
        uses: actions/setup-node@v4
        with:
          node-version: "${{ steps.node_version.outputs.result }}"
          check-latest: true
          token: ${{ secrets.BOT_TOKEN }}
      # Cache all NPM packages
      - name: Cache NPM packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      # Run versioning to tag the source
      - name: Run Versioning setup
        run: make version

      # Get project name with yq in the process strip starting @ if exists and change any / to _
      - name: Get project name
        id: project_name
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oy '.name | sub("^@","") | sub("/","_")' ./package.json

      # Get project description
      - name: Get project description
        id: project_description
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oy '.description' ./package.json

      # Get project type
      - name: Get project description
        id: project_type
        uses: mikefarah/yq@master
        with:
          cmd: yq e -oy '.type' ./package.json

      # Extension for gulpfile
      - name: Gulpfile Setting
        id: gulpfile_settings
        run: |
          ext=js
          if [ "${{ steps.project_type.outputs.result }}" == "module" ]; then
            ext=cjs
          fi
          echo "extension=$ext" >> $GITHUB_OUTPUT

#      # Create generic gulp File for process
#      - name: Create gulpfile
#        run: |
#          cat > gulpfile.${{ steps.gulpfile_settings.outputs.extension }} << EOF
#          var gulp = require('gulp');
#          var sonarqubeScanner = require('sonarqube-scanner');
#          var sonarUrl = process.env.SONARQUBE_URL
#          var sonarToken = process.env.SONARQUBE_TOKEN
#
#          gulp.task('default', function(callback) {
#            sonarqubeScanner({
#              serverUrl : sonarUrl,
#              login : sonarToken,
#              token : sonarToken,
#              options : {
#                "sonar.projectKey": "${{ steps.project_name.outputs.result }}",
#                "sonar.projectName": "${{ steps.project_description.outputs.result }}"
#              }
#            }, callback);
#          });
#          EOF
      # Create sonar-project.properties
      - name: Create Sonar Project Properties
        run: |
          cat > sonar-project.properties << EOF
          sonar.projectKey=${{ steps.project_name.outputs.result }}
          sonar.projectName=${{ steps.project_description.outputs.result }}
          sonar.sources=.
          sonar.sourceEncoding=UTF-8
          sonar.exclusions=node_modules/**,coverage/**,test/**,tests/**
          sonar.tests=.
          sonar.test.inclusions=**/*.test.js,**/*.spec.js
          sonar.test.exclusions=node_modules/**,coverage/**,test/**,tests/**
          EOF
      # Test the code!
      - name: Static Test Code
        env:
          SONAR_HOST_URL: ${{ inputs.sonarqubeUrl }}
          SONAR_TOKEN: ${{ secrets.sonarqubeToken }}
        run: |
          npm install
          npm install -D sonarqube-scanner
          npx sonarqube-scanner

